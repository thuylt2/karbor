[metadata]
name = karbor
summary = Application Data Protection as a Service for OpenStack
description-file = 
	README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = https://docs.openstack.org/karbor/latest/
classifier = 
	Environment :: OpenStack
	Intended Audience :: Information Technology
	Intended Audience :: System Administrators
	License :: OSI Approved :: Apache Software License
	Operating System :: POSIX :: Linux
	Programming Language :: Python
	Programming Language :: Python :: 2
	Programming Language :: Python :: 2.7
	Programming Language :: Python :: 3
	Programming Language :: Python :: 3.5

[files]
packages = 
	karbor

[entry_points]
console_scripts = 
	karbor-api = karbor.cmd.api:main
	karbor-manage = karbor.cmd.manage:main
	karbor-operationengine = karbor.cmd.operationengine:main
	karbor-protection = karbor.cmd.protection:main
oslo.config.opts = 
	karbor.common.opts = karbor.common.opts:list_opts
wsgi_scripts = 
	karbor-wsgi = karbor.wsgi.wsgi:initialize_application
karbor.database.migration_backend = 
	sqlalchemy = oslo_db.sqlalchemy.migration
karbor.protections = 
	karbor-swift-bank-plugin = karbor.services.protection.bank_plugins.swift_bank_plugin:SwiftBankPlugin
	karbor-fs-bank-plugin = karbor.services.protection.bank_plugins.file_system_bank_plugin:FileSystemBankPlugin
	karbor-s3-bank-plugin = karbor.services.protection.bank_plugins.s3_bank_plugin:S3BankPlugin
	karbor-volume-protection-plugin = karbor.services.protection.protection_plugins.volume.cinder_protection_plugin:CinderBackupProtectionPlugin
	karbor-volume-snapshot-plugin = karbor.services.protection.protection_plugins.volume.volume_snapshot_plugin:VolumeSnapshotProtectionPlugin
	karbor-image-protection-plugin = karbor.services.protection.protection_plugins.image.image_protection_plugin:GlanceProtectionPlugin
	karbor-server-protection-plugin = karbor.services.protection.protection_plugins.server.nova_protection_plugin:NovaProtectionPlugin
	karbor-share-protection-plugin = karbor.services.protection.protection_plugins.share.share_snapshot_plugin:ManilaSnapshotProtectionPlugin
	karbor-noop-protection-plugin = karbor.services.protection.protection_plugins.noop_plugin:NoopProtectionPlugin
	karbor-network-protection-plugin = karbor.services.protection.protection_plugins.network.neutron_protection_plugin:NeutronProtectionPlugin
	karbor-database-protection-plugin = karbor.services.protection.protection_plugins.database.database_backup_plugin:DatabaseBackupProtectionPlugin
karbor.provider = 
	provider-registry = karbor.services.protection.provider:ProviderRegistry
karbor.protectables = 
	project = karbor.services.protection.protectable_plugins.project:ProjectProtectablePlugin
	server = karbor.services.protection.protectable_plugins.server:ServerProtectablePlugin
	volume = karbor.services.protection.protectable_plugins.volume:VolumeProtectablePlugin
	image = karbor.services.protection.protectable_plugins.image:ImageProtectablePlugin
	share = karbor.services.protection.protectable_plugins.share:ShareProtectablePlugin
	network = karbor.services.protection.protectable_plugins.network:NetworkProtectablePlugin
	database = karbor.services.protection.protectable_plugins.database:DatabaseInstanceProtectablePlugin
karbor.operationengine.engine.timetrigger.time_format = 
	crontab = karbor.services.operationengine.engine.triggers.timetrigger.timeformats.crontab_time:Crontab
	calendar = karbor.services.operationengine.engine.triggers.timetrigger.timeformats.calendar_time:ICal
karbor.operationengine.engine.executor = 
	thread_pool = karbor.services.operationengine.engine.executors.thread_pool_executor:ThreadPoolExecutor
	green_thread = karbor.services.operationengine.engine.executors.green_thread_executor:GreenThreadExecutor

[build_sphinx]
source-dir = doc/source
build-dir = doc/build
all_files = 1
warning-is-error = 1

[upload_sphinx]
upload-dir = doc/build/html

[compile_catalog]
directory = karbor/locale
domain = karbor

[update_catalog]
domain = karbor
output_dir = karbor/locale
input_file = karbor/locale/karbor.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = karbor/locale/karbor.pot

[pbr]
autodoc_index_modules = true
autodoc_exclude_modules = 
	karbor.tests.*
	karbor.wsgi.*
	karbor.services.protection.bank_plugins.*
	karbor.services.protection.protectable_plugins.*
	karbor.services.protection.protection_plugins.*
api_doc_dir = contributor/api
warnerrors = true

[egg_info]
tag_build = 
tag_date = 0

